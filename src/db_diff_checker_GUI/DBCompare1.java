/**
 * DBCompare1 is a JFrame that takes user input to make a comparison between 1 
 * database and a database snapshot or to take a database snapshot
 * @author Peter Kaufman
 * @class DBCompare1
 * @access public
 * @version 9-21-17
 * @since 9-20-17 
 */
package db_diff_checker_GUI;
import java.sql.SQLException;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
public class DBCompare1 extends javax.swing.JFrame {

    /**
     * Creates new form DBCompare1
     * @author Peter Kaufman
     * @type constructor
     * @access public
     */
    public DBCompare1() {
        
        initComponents();
        this.setIconImage( new ImageIcon( getClass().getResource( "/Images/DBCompare.png" )).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        host3 = new javax.swing.JTextField();
        port3 = new javax.swing.JTextField();
        database3 = new javax.swing.JTextField();
        password3 = new javax.swing.JPasswordField();
        jLabel23 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        DB1btn = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        username3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setText("Enter Database Information Below");

        jLabel18.setText("Enter MySQL Username:");

        DB1btn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DB1btn.setText("Compare");
        DB1btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DB1btnActionPerformed(evt);
            }
        });

        jLabel19.setText("Enter MySQL Password:");

        jLabel20.setText("Enter MySQL Host:");

        jLabel21.setText("Enter MySQL Port:");

        jLabel22.setText("Enter MySQL Database:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(6, 6, 6)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(database3)
                            .addComponent(username3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(host3)
                            .addComponent(port3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DB1btn))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(username3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(password3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(host3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(port3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(database3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DB1btn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * DB1btnActionPerformed determines if the user has put in the appropriate 
     * info and either takes a db snapshot or compares a database to a database 
     * snapshot
     * @author Peter Kaufman
     * @type function
     * @access private
     * @param evt is an ActionEvent which represents clicking DB1btn
     */
    private void DB1btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DB1btnActionPerformed
        try {
            if ( !( port3.getText().equals( "" ) |username3.getText().equals( "" ) |
                new String(password3.getPassword()).equals( "" ) | host3.getText().equals( "" ) |
                database3.getText().equals( "" ))) {

                if ( this.getTitle().equals( "Compare Database to Snapshot" )) {

                    this.error = false;
                    compare2();
                } else {

                    this.error = false;
                    takeSnapshot();
                }

            } else {

                jLabel23.setText( "Please do not leave any fields blank." );
            }
        } catch( IOException e ) {

            error( "There was an error with the database snapshot file." );
        } 
    }//GEN-LAST:event_DB1btnActionPerformed

    /**
     * formWindowClosed opens the start JFrame if the compare button has not been
     * clicked
     * @author Peter Kaufman
     * @type function
     * @access private
     * @param evt is a WindowEvent which represents this window closing
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if ( error ){
            
            DB_Diff_Checker_GUI start = new DB_Diff_Checker_GUI();
            start.setSize( 375, 225 );
            start.setVisible( true );
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * takeSnapshot takes a database snapshot based on user input
     * @author Peter Kaufman
     * @type function
     * @access private
     */
    public void takeSnapshot() {
        try {
            
            db1 = new Db_conn( username3.getText(), new String(password3.getPassword()),
                    host3.getText(), port3.getText(), database3.getText());
            dab1 = new Database( db1 );
            FileConversion.writeTo( dab1 );
            
            this.error = true;
            this.dispose();
        } catch( IOException e ) {
        
            error( "There was an error when trying to take a database snapshot." );
        } catch ( SQLException e ) {
        
            error( "There was an error with the database connection. Please try again." );
        }
    }
    
    /**
     * setButtonTxt sets the text of DB1btn based on text input
     * @author Peter Kaufman
     * @type function
     * @access public
     * @param text is a String which will be the DB1btn's text
     */
    public void setButtonTxt( String text ) {
    
        DB1btn.setText( text );
    }
    
    /**
     * compare2 compares the database specified by the user to a database snapshot
     * @author Peter Kaufman
     * @type function
     * @access private
     * @throws IOException which occurs when there is an error with the database
     * snapshot file
     */
    private void compare2() throws IOException {
        try {
            dab1 = FileConversion.readFrom(); 

            db2 = new Db_conn( username3.getText(), new String(password3.getPassword()),
                        host3.getText(), port3.getText(), database3.getText());
            dab2 = new Database( db2 );

            sql.addAll( dab1.compareTables( dab2.getTables()));
            update_tables.addAll( dab1.tablesDiffs( dab2.getTables()));
            sql.addAll( dab1.updateTables( dab2.getTables(), update_tables ));
            sql.addAll( dab1.updateViews( dab2.getViews())); 

            displayResult();
            this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } catch ( SQLException e ) {
        
            error( "There was an error with the database connection. Please try again." );
        }
    }
    
    /**
     * displayResult opens a JFrame with the result of the comparison
     * @author Peter Kaufman
     * @type function
     * @access private
     */
    private void displayResult() {
           
        Result rs = new Result();
        rs.results( sql );
    }
    
    /**
     * error opens a JFrame with an error message 
     * @author Peter Kaufman
     * @type function
     * @access private
     * @param error is a String which represents the error message to display
     */
    private void error( String error ) {
    
        Error err = new Error( error );
        err.setSize( 430, 100 );
        err.setVisible( true );
        this.error = true;
    }
            
    private boolean error = true;
    private Db_conn db1, db2;
    private Database dab1, dab2;
    private ArrayList<String> sql = new ArrayList();
    private ArrayList<String> update_tables = new ArrayList();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DB1btn;
    private javax.swing.JTextField database3;
    private javax.swing.JTextField host3;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JPasswordField password3;
    private javax.swing.JTextField port3;
    private javax.swing.JTextField username3;
    // End of variables declaration//GEN-END:variables
}
